type Comment implements Node {
  id: ID!
  content: String
  post: Post
}

type commentConnection {
  pageInfo: PageInfo!
  edges: [commentEdge]
  totalCount: Int
}

type commentEdge {
  node: Comment
  cursor: String!
}

type Mutation {
  updatePerson(input: UpdatePersonInput!): UpdatePersonPayload
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type paginationInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: Int
  endCursor: Int
}

type Person implements Node {
  id: ID!
  firstName: String
  lastName: String
  email: String
  language: String
  posts(offset: Int, limit: Int): postConnection
}

type Post implements Node {
  id: ID!
  title: String
  content: String
  person: Person
  comments(after: String, first: Int, before: String, last: Int): commentConnection
}

type postConnection {
  pageInfo: paginationInfo!
  edges: [postEdge]
  totalCount: Int
}

type postEdge {
  node: Post
  cursor: Int!
}

type Query {
  node(id: ID!): Node
  viewer: Person
}

input UpdatePersonInput {
  id: ID!
  firstName: String
  lastName: String
  email: String
  language: String
  clientMutationId: String!
}

type UpdatePersonPayload {
  person: Person
  clientMutationId: String!
}
